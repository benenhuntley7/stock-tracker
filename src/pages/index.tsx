import Head from "next/head";
import { SignInButton, SignOutButton, UserButton } from "@clerk/nextjs";
import { useUser } from "@clerk/nextjs";

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import { LoadingPage } from "~/components/loadingSpinner";
import { GetServerSideProps, InferGetServerSidePropsType } from "next";
import yahooFinance from "yahoo-finance2";
dayjs.extend(relativeTime);

type PostWithUser = RouterOutputs["posts"]["getAll"][number];

type Purchase = {
  id: number;
  stock: string;
  purchaseDate: string;
  purchaseCost: number;
  purchaseQty: number;
};

const purchases: Purchase[] = [
  {
    id: 1,
    stock: "SYI.AX",
    purchaseDate: "2021-02-01",
    purchaseCost: 1.5,
    purchaseQty: 20,
  },
  {
    id: 2,
    stock: "SYI.AX",
    purchaseDate: "2022-02-01",
    purchaseCost: 50,
    purchaseQty: 20,
  },
];

const PostView = (props: PostWithUser) => {
  const { id, content, author, createdAt } = props;
  console.log(createdAt);
  return (
    <div className="flex gap-3 border-b border-slate-400 p-8" key={id}>
      <Image
        src={author!.imageUrl}
        alt={`@${author!.username}'s profile image`}
        className="me-2 h-10 w-10 rounded-full"
        width={56}
        height={56}
      />
      <div className="flex flex-col">
        <div className="flex text-slate-400">
          <span className="text-slate-300">@{author?.username}</span>
          <span className="px-2 font-thin">Â·</span>
          <span>{dayjs(createdAt).fromNow()}</span>
        </div>
        <span className="text-xl">{content}</span>
      </div>
    </div>
  );
};

const CreatePostWizard = () => {
  const { user } = useUser();
  console.log(user?.id);

  if (!user) return null;

  return (
    <div className="flex w-full gap-4 border-b p-4">
      <Image
        src={user.imageUrl}
        alt="Profile Image"
        className="h-14 w-14 rounded-full"
        width={1}
        height={1}
      />
      <input
        placeholder="Type some stuff"
        className="grow bg-transparent outline-none"
      />
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;

  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="flex flex-col">
      {data.map((fullPost: PostWithUser) => (
        <PostView {...fullPost} key={fullPost.id} />
      ))}
    </div>
  );
};

type StockQuote = {
  // Define the properties you expect from the stock quote object
  // For example:
  symbol: string;
  price: number;
  // Add other properties as needed
};

export const getServerSideProps: GetServerSideProps = async () => {
  try {
    const quote = await yahooFinance.quote("SYI.AX");
    const askPrice = quote.regularMarketPrice;

    return {
      props: {
        askPrice,
      },
    };
  } catch (error: any) {
    console.error("Error fetching stock quote:", error.message);

    return {
      props: {
        askPrice: null,
      },
    };
  }
};

type HomeProps = {
  askPrice: number | null; // Adjust the type based on the actual type of askPrice
};

export default function Home({ askPrice }: HomeProps) {
  const { isLoaded: userLoaded, isSignedIn } = useUser();

  // Start fetching asap to cache
  api.posts.getAll.useQuery();

  // Return empty div if both aren't loaded since user tends to load faster
  if (!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div>{askPrice}</div>
        <div className="w-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex justify-between border-b border-slate-400 bg-slate-800 p-4">
            <div className="flex items-center">
              {/* Left Side Content */}
              {/* <UserButton afterSignOutUrl="/" /> */}
            </div>
            <div className="flex items-center">
              {/* Right Side Content */}
              {isSignedIn ? <SignOutButton /> : <SignInButton />}
            </div>
          </div>
          {isSignedIn && <CreatePostWizard />}
          <Feed />
        </div>
      </main>
    </>
  );
}
