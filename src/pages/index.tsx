import Head from "next/head";

import { SignInButton, SignOutButton, UserButton } from "@clerk/nextjs";
import { useUser } from "@clerk/nextjs";

import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
dayjs.extend(relativeTime);

import Image from "next/image";

import { LoadingPage } from "~/components/loadingSpinner";
import { TradeType } from "@prisma/client";

type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: PostWithUser) => {
  const { id, content, author, createdAt } = props;
  //console.log(createdAt);
  return (
    <div className="flex gap-3 border-b border-slate-400 p-8" key={id}>
      <Image
        src={author!.imageUrl}
        alt={`@${author!.username}'s profile image`}
        className="me-2 h-10 w-10 rounded-full"
        width={56}
        height={56}
      />
      <div className="flex flex-col">
        <div className="flex text-slate-400">
          <span className="text-slate-300">@{author?.username}</span>
          <span className="px-2 font-thin">Â·</span>
          <span>{dayjs(createdAt).fromNow()}</span>
        </div>
        <span className="text-xl">{content}</span>
      </div>
    </div>
  );
};

const CreatePostWizard = () => {
  const { user } = useUser();
  console.log(user?.id);

  if (!user) return null;

  return (
    <div className="flex w-full gap-4 border-b p-4">
      <Image
        src={user.imageUrl}
        alt="Profile Image"
        className="h-14 w-14 rounded-full"
        width={1}
        height={1}
      />
      <input
        placeholder="Type some stuff"
        className="grow bg-transparent outline-none"
      />
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;

  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="flex flex-col">
      {data.map((fullPost: PostWithUser) => (
        <PostView {...fullPost} key={fullPost.id} />
      ))}
    </div>
  );
};

const StockData = () => {
  type CombinedType = {
    id: string;
    symbol: string;
    brokerage: number;
    purchasedAt: Date;
    settledAt: Date;
    tradeType: TradeType;
    purchasePrice: number;
    purchaseQty: number;
    userId: string;
    regularMarketPrice?: number; // Add this line for the new property
    longName?: string;
    growth?: number;
  };

  const { data: stocksData, isLoading: stockDataLoading } =
    api.stocks.getAllPurchases.useQuery();
  const stockPurchases = stocksData?.stocks;

  const { data: quotesData, isLoading: quoteDataLoading } =
    api.stocks.getQuotes.useQuery(
      stockPurchases?.map((stock) => stock.symbol) ?? [],
    );

  let combinedData: CombinedType[] | undefined;

  if (
    stockPurchases &&
    stockPurchases?.length > 0 &&
    quotesData &&
    quotesData.length > 0
  ) {
    combinedData = stockPurchases.map((stock) => {
      const quote = quotesData.find((q) => q.symbol === stock.symbol);
      const growth =
        ((quote?.regularMarketPrice ?? 0) - stock.purchasePrice) *
        stock.purchaseQty;
      return quote ? { ...stock, ...quote, growth } : stock;
    });
  }

  if (stockDataLoading || quoteDataLoading) return <LoadingPage />;

  return (
    <div className="mt-4">
      {combinedData?.map((stock) => (
        <div key={stock.symbol}>
          {stock.symbol}: Purchase Price: ${stock.purchasePrice?.toFixed(2)} |
          Market Price: ${stock.regularMarketPrice?.toFixed(2)} | Growth: $
          {stock.growth?.toFixed(2)}
        </div>
      ))}
    </div>
  );
};

export default function Home() {
  const { isLoaded: userLoaded, isSignedIn } = useUser();

  // Return empty div if both aren't loaded since user tends to load faster
  if (!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="w-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex justify-between border-b border-slate-400 bg-slate-800 p-4">
            <div className="flex items-center">
              {/* Left Side Content */}
              {/* <UserButton afterSignOutUrl="/" /> */}
            </div>
            <div className="flex items-center">
              {/* Right Side Content */}
              {isSignedIn ? <SignOutButton /> : <SignInButton />}
            </div>
          </div>
          {isSignedIn && <CreatePostWizard />}
          <Feed />
          <StockData />
        </div>
      </main>
    </>
  );
}
